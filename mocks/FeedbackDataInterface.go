// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	feedback "airbnb/features/feedback"

	mock "github.com/stretchr/testify/mock"
)

// FeedbackDataInterface is an autogenerated mock type for the FeedbackDataInterface type
type FeedbackDataInterface struct {
	mock.Mock
}

// AddFeedback provides a mock function with given fields: userID, newFeedback
func (_m *FeedbackDataInterface) AddFeedback(userID uint, newFeedback feedback.FeedbackCore) error {
	ret := _m.Called(userID, newFeedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, feedback.FeedbackCore) error); ok {
		r0 = rf(userID, newFeedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFeedback provides a mock function with given fields: userID, homestayID
func (_m *FeedbackDataInterface) ListFeedback(userID uint, homestayID uint) ([]feedback.FeedbackCore, error) {
	ret := _m.Called(userID, homestayID)

	var r0 []feedback.FeedbackCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]feedback.FeedbackCore, error)); ok {
		return rf(userID, homestayID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []feedback.FeedbackCore); ok {
		r0 = rf(userID, homestayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedback.FeedbackCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, homestayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFeedbackDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeedbackDataInterface creates a new instance of FeedbackDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeedbackDataInterface(t mockConstructorTestingTNewFeedbackDataInterface) *FeedbackDataInterface {
	mock := &FeedbackDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
