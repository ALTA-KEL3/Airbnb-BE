// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	homestay "airbnb/features/homestay"

	mock "github.com/stretchr/testify/mock"
)

// HomestayData is an autogenerated mock type for the HomestayData type
type HomestayData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, newHomestay
func (_m *HomestayData) Add(userID uint, newHomestay homestay.Core) (homestay.Core, error) {
	ret := _m.Called(userID, newHomestay)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, homestay.Core) (homestay.Core, error)); ok {
		return rf(userID, newHomestay)
	}
	if rf, ok := ret.Get(0).(func(uint, homestay.Core) homestay.Core); ok {
		r0 = rf(userID, newHomestay)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, homestay.Core) error); ok {
		r1 = rf(userID, newHomestay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, homestayID
func (_m *HomestayData) Delete(userID uint, homestayID uint) error {
	ret := _m.Called(userID, homestayID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, homestayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MyHomestay provides a mock function with given fields: userID
func (_m *HomestayData) MyHomestay(userID uint) ([]homestay.Core, error) {
	ret := _m.Called(userID)

	var r0 []homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]homestay.Core, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []homestay.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]homestay.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *HomestayData) ShowAll() ([]homestay.Core, error) {
	ret := _m.Called()

	var r0 []homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]homestay.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []homestay.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]homestay.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowDetail provides a mock function with given fields: homestayID
func (_m *HomestayData) ShowDetail(homestayID uint) (homestay.Core, error) {
	ret := _m.Called(homestayID)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (homestay.Core, error)); ok {
		return rf(homestayID)
	}
	if rf, ok := ret.Get(0).(func(uint) homestay.Core); ok {
		r0 = rf(homestayID)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(homestayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, homestayID, updateHomestay
func (_m *HomestayData) Update(userID uint, homestayID uint, updateHomestay homestay.Core) (homestay.Core, error) {
	ret := _m.Called(userID, homestayID, updateHomestay)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, homestay.Core) (homestay.Core, error)); ok {
		return rf(userID, homestayID, updateHomestay)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, homestay.Core) homestay.Core); ok {
		r0 = rf(userID, homestayID, updateHomestay)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, homestay.Core) error); ok {
		r1 = rf(userID, homestayID, updateHomestay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHomestayData interface {
	mock.TestingT
	Cleanup(func())
}

// NewHomestayData creates a new instance of HomestayData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHomestayData(t mockConstructorTestingTNewHomestayData) *HomestayData {
	mock := &HomestayData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
