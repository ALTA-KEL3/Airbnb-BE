// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	homestay "airbnb/features/homestay"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// HomestayService is an autogenerated mock type for the HomestayService type
type HomestayService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, fileData, newHomestay
func (_m *HomestayService) Add(token interface{}, fileData multipart.FileHeader, newHomestay homestay.Core) (homestay.Core, error) {
	ret := _m.Called(token, fileData, newHomestay)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, multipart.FileHeader, homestay.Core) (homestay.Core, error)); ok {
		return rf(token, fileData, newHomestay)
	}
	if rf, ok := ret.Get(0).(func(interface{}, multipart.FileHeader, homestay.Core) homestay.Core); ok {
		r0 = rf(token, fileData, newHomestay)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(interface{}, multipart.FileHeader, homestay.Core) error); ok {
		r1 = rf(token, fileData, newHomestay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, homestayID
func (_m *HomestayService) Delete(token interface{}, homestayID uint) error {
	ret := _m.Called(token, homestayID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, homestayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MyHomestay provides a mock function with given fields: token
func (_m *HomestayService) MyHomestay(token interface{}) ([]homestay.Core, error) {
	ret := _m.Called(token)

	var r0 []homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]homestay.Core, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []homestay.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]homestay.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *HomestayService) ShowAll() ([]homestay.Core, error) {
	ret := _m.Called()

	var r0 []homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]homestay.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []homestay.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]homestay.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowDetail provides a mock function with given fields: homestayID
func (_m *HomestayService) ShowDetail(homestayID uint) (homestay.Core, error) {
	ret := _m.Called(homestayID)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (homestay.Core, error)); ok {
		return rf(homestayID)
	}
	if rf, ok := ret.Get(0).(func(uint) homestay.Core); ok {
		r0 = rf(homestayID)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(homestayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, homestayID, fileData, updateData
func (_m *HomestayService) Update(token interface{}, homestayID uint, fileData multipart.FileHeader, updateData homestay.Core) (homestay.Core, error) {
	ret := _m.Called(token, homestayID, fileData, updateData)

	var r0 homestay.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, multipart.FileHeader, homestay.Core) (homestay.Core, error)); ok {
		return rf(token, homestayID, fileData, updateData)
	}
	if rf, ok := ret.Get(0).(func(interface{}, uint, multipart.FileHeader, homestay.Core) homestay.Core); ok {
		r0 = rf(token, homestayID, fileData, updateData)
	} else {
		r0 = ret.Get(0).(homestay.Core)
	}

	if rf, ok := ret.Get(1).(func(interface{}, uint, multipart.FileHeader, homestay.Core) error); ok {
		r1 = rf(token, homestayID, fileData, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHomestayService interface {
	mock.TestingT
	Cleanup(func())
}

// NewHomestayService creates a new instance of HomestayService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHomestayService(t mockConstructorTestingTNewHomestayService) *HomestayService {
	mock := &HomestayService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
