openapi: 3.0.3
info:
  title: GoHome
  description: This is API for Group Project By Alterra Academy
  version: "1.0.0"
  contact:
    email: alfianadityadwi@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALFIANADSAPUTRA_1/AirBnB/1.0.0
  # Main URL
  - description: Main URL
    url: URL will be update soon
tags:
  - name: Auth
  - name: User
  - name: Homestay
  - name: Reservation
  - name: Feedback

# AUTH
paths:
  /login:
    post:
      tags:
        - "Auth"
      summary: "Login"
      description: "Features login for users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: "alfian@example.com"
              password: "alfian123"
      responses:
        200:
          description: "login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "alfian aditya"
                  email: "alfian@example.com"
                  phone: "0812334455"
                  address: "jln. Gelatik no 25 Bandung"
                message: "login success"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

# USER
  /register:
    post:
      tags:
        - "User"
      summary: "Register new user"
      description: "Endpoint for register new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone:
                  type: string
                address:
                  type: string
            example:
              id: 1
              name: "Alfian Aditya"
              email: "alfian@example.com"
              password: "alfian123"
              phone: "0812334455"
              address: "jln. Gelatik no 25 Bandung"
      responses:
        201:
          description: "insert user data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success create account"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /profile:
    get:
      tags:
        - "User"
      summary: "show detail profile"
      description: "endpoint for user see their own profile"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "show detail user profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "alfian aditya"
                  email: "alfian@example.com"
                  address: "jln. Gelatik no 25 Bandung"
                  role: ""
                  phone: "0812334455"
                  photo_profile: ""
                message: "success show profile"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - "User"
      summary: "update user profile"
      description: "endpoint for user update their own profile"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
            example:
              name: "Alfian aditya"
              email: "alfian@example.com"
              address: "jln. Gelatik no 25 Bandung"
              phone: "0812334455"
              photo_profile: ""
              role: "hoster"
      responses:
        200:
          description: "update profile data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "Alfian aditya"
                  email: "alfian@example.com"
                  address: "jln. Gelatik no 25 Bandung"
                  phone: "0812334455"
                  photo_profile: ""
                  role: "hoster"
                message: "success update profile data"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "User"
      summary: "deactive user account"
      description: "endpoint for deactive user account"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "deactive user account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success deactive user account"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

# HOMESTAY
  /homestays:
    post:
      tags:
        - Homestay
      summary: "Create Homestay" 
      description: "Create New Homestay"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/InsertHomestayObject"
            example:
              name: "Villa puncak"
              address: "jl. kenanga, Malang"
              phone: 089777777
              price: 300000
              facility: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
              image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
              image2: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
              image3: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
      responses:
        201:
          description: "Success Create Homestay"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                message: "Success Create New Homestay"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Homestay
      summary: "Get All Homestay And Search"
      description: "Get all homestay and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: name
          description: "Homestay Name"
          required: false
          in: query
          schema:
            type: string
            example: "Villa puncak"
      responses:
        200:
          description: A list of Homestay
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  data:
                    - id: 1
                      name: "Villa puncak"
                      total_rating: 4.5
                      address: "jl. kenanga, Malang"
                      phone: 089777777
                      price: 300000
                      facility: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                      image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                    - id: 2
                      name: "Villa puncak"
                      total_rating: 4.5
                      address: "jl. kenanga, Malang"
                      phone: 089777777
                      price: 300000
                      facility: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                      image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                  message: "Success get all homestay"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"

  /homestays/{homestay_id}:
    get:
      tags:
        - Homestay
      summary: "Get Homestays by Id"
      description: "Get Homestay using id class at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: homestay_id
          description: "Id homestay to get data"
          required: true
          in: path
          schema:
            description: "Id homestay 1"
            type: integer
            example: 1
      responses:
        200:
          description: "Success Get Homestay by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  data:
                    id: 1
                    name: "Villa puncak"
                    total_rating: 5
                    address: "jl. kenanga, Malang"
                    phone: "089777777"
                    price: 300000
                    facility: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                    image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                    image2: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                    image3: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                  message: "Success Get Homestay by Id"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Homestay
      summary: "Update Homestays"
      description: "Update Homestay using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: homestay_id
          description: "Id homestay to update data"
          required: true
          in: path
          schema:
            description: "Id homestay 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditHomestayObject"
            example:
                name: "Villa puncak"
                address: "jl. kenanga, Malang"
                phone: 089777777
                price: 300000
                facility: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                image2: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
                image3: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
      responses:
        200:
          description: "Success Update Homestay"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  message: "Success Update Homestay"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Homestay
      summary: "Delete Homestays"
      description: "Delete homestay using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: homestay_id
          description: "Id homestay to delete data."
          required: true
          in: path
          schema:
            description: "Id homestay 1."
            type: integer
            example: 1
      responses:
        200:
          description: "Success Delete Homestay"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  message: "Success Delete Homestay"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"
          
# SHOW OWN HOMESTAY LIST
  /myhomestays:
    get:
      tags: 
        - "Homestay"
      summary: "Show own homestay list"
      description: "show own homestay list"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "show own homestay list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data: 
                  - id: 1
                    user_id: 1
                    name: "Villa 1"
                    total_rating: 4.5
                    facility: "5 Kamar Tidur, 2 Kamar Mandi dalam, AC, Private Pool, dan Rooftop"
                    price: 500000
                  - id: 2
                    user_id: 1
                    name: "Villa 2"
                    total_rating: 4.5
                    facility: "5 Kamar Tidur, 2 Kamar Mandi dalam, AC, Private Pool, dan Rooftop"
                    price: 500000
                  - id: 3
                    user_id: 1
                    name: "Villa 3"
                    total_rating: 4.5
                    facility: "5 Kamar Tidur, 2 Kamar Mandi dalam, AC, Private Pool, dan Rooftop"
                    price: 500000
                message: "success show own homestay list"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
      

# RESERVATION
  /reservations/check:
    post:
      tags:
        - "Reservation"
      summary: "check reservation"
      description: "endpoint for user to check reservation"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                check_in:
                  type: string
                check_out:
                  type: string
                price:
                  type: number
            example:
              homestay_id: 1
              check_in: "2023-03-11"
              check_out: "2023-03-12"
      responses:
        201:
          description: "check reservation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  homestay_id: 1
                  check_in: "2023-03-11"
                  check_out: "2023-03-12"
                message: "success add reservation"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /reservations:
    post:
      tags:
        - "Reservation"
      summary: "make reservation"
      description: "endpoint for user to make their reservation"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              check_in: "2023-03-10"
              check_out: "2023-03-12"
              price: 1.500.000
              name: "ida"
              card_number: "4154 1215 4588 1547"
              cvv: "578"
              month: "May"
              year: "2020"
      responses:
        200:
          description: "make reservation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 2
                  check_in: "2023-03-10"
                  check_out: "2023-03-12"
                  price: 1.500.000
                message: "success make reservation"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - "Reservation"
      summary: "show history reservation"
      description: "endpoint for show history user reservations"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "show history reservation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  room_id: 1
                  room_name: "Villa puncak"
                  check_in: "2023-03-13"
                  check_out: "2023-03-17"
                  address: "somewhere"
                  price: 4000000
                message: "success show history reservation"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

# FEEDBACK
  /feedbacks:
    post:
      tags:
        - Feedback
      summary: "Create Feedback" 
      description: "Create New Feedback for homestay"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertFeedbackObject"
            example:
              id_homestay: 1
              rating: 4.5
              note: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
      responses:
        201:
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                message: "Success add feedback"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"

  /homestays/{homestay_id}/feedbacks:
    get:
      tags:
        - "Homestay"
      summary: "Show feedback list"
      description: "Show feedback list by homestay ID"
      security:
        - JWTAuth: []
      parameters:
        - name: homestay_id
          description: "ID homestay"
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: "show own list feedback in homestay"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data: 
                - id: 1
                  rating: 4.5
                  note: "oke"
                  user:
                    - id: 1
                      name: "Aldi"
                      photo_profile: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                - id: 2
                  rating: 4.5
                  note: "boleh deh"
                  user:
                    - id: 2
                      name: "Soleh"
                      photo_profile: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
components:
  schemas:

### Homestay Schemas
    "InsertHomestayObject":
      type: object
      properties:
        "name":
          type: string
        "address":
          type: string
        "phone":
          type: integer
        "price": 
          type: integer
        "image1":
          type: string
          format: binary
        "image2":
          type: string
          format: binary
        "image3":
          type: string
          format: binary
        "description":
          type: string    
    "EditHomestayObject":
      type: object
      properties:
        "name":
          type: string
        "address":
          type: string
        "phone":
          type: integer
        "price": 
          type: integer
        "image1":
          type: string
          format: binary
        "image2":
          type: string
          format: binary
        "image3":
          type: string
          format: binary
        "description":
          type: string 

### Feedbacks Schemas
    "InsertFeedbackObject":
      type: object
      properties:
        "id homestay":
          type: integer
        "rating":
          type: string
        "feedback":
          type: string
        "id_homestay":
          type: string        

    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object

    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        message:
          type: string

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    200:
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    201:
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
  
    400:
      description: "error from user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "bad request"
    404:
      description: "data not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "data not registered"
    500:
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "internal server error"